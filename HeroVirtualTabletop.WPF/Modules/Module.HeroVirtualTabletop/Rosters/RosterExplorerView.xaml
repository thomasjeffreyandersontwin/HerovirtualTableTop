<UserControl x:Class="Module.HeroVirtualTabletop.Roster.RosterExplorerView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:roster="clr-namespace:Module.HeroVirtualTabletop.Roster"
             xmlns:characters="clr-namespace:Module.HeroVirtualTabletop.Characters"
             xmlns:behaviors="clr-namespace:Framework.WPF.Behaviors;assembly=Framework.WPF"
             xmlns:bindings="clr-namespace:Framework.WPF.Binding;assembly=Framework.WPF"
             xmlns:extensions="clr-namespace:Framework.WPF.Extensions;assembly=Framework.WPF"
             xmlns:library="clr-namespace:Framework.WPF.Library;assembly=Framework.WPF"
             xmlns:converters="clr-namespace:Module.Shared.Converters;assembly=Module.Shared"
             xmlns:localconverters="clr-namespace:Module.HeroVirtualTabletop.Library.Converters"
             mc:Ignorable="d" >
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Module.Shared;Component/Resources/ResourceDictionary/GeneralResources.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <localconverters:CrowdNameConverter x:Key="CrowdNameConverter"/>
            <converters:BooleanToVisibilityConverter x:Key="boolToVisibilityConverter"/>
            <localconverters:characterComparer x:Key="characterComparer"/>
            <localconverters:ActiveAttackEffectToAnimationIconTextConverter x:Key="ActiveAttackEffectToAnimationIconTextConverter"/>
            <localconverters:ActiveAttackModeToVisibilityConverter x:Key="ActiveAttackModeToVisibilityConverter"/>
            <localconverters:ActiveAttackModeToAnimationIconTextConverter x:Key="ActiveAttackModeToAnimationIconTextConverter"/>
            <localconverters:ActiveAttackEffectToVisibilityConverter x:Key="ActiveAttackEffectToVisibilityConverter"/>
            <CollectionViewSource 
                x:Key="ParticipantsView" 
                Source="{Binding DataContext.Participants, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type roster:RosterExplorerView}}}">

                <!-- Grouping -->
                <CollectionViewSource.GroupDescriptions>
                    <PropertyGroupDescription PropertyName="RosterCrowd.Name" />
                </CollectionViewSource.GroupDescriptions>
            </CollectionViewSource>
            <bindings:BindingProxy x:Key="BindingProxy" Data="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=roster:RosterExplorerView}, Path=DataContext}"/>
            <ContextMenu x:Key="RosterExplorerMenu">
                <MenuItem Header="Activate Character" Command="{Binding Source={StaticResource BindingProxy}, Path=Data.ActivateCharacterCommand}"></MenuItem>
                <MenuItem Header="Activate Crowd as Gang" Command="{Binding Source={StaticResource BindingProxy}, Path=Data.ActivateCrowdAsGangCommand}"></MenuItem>
                <MenuItem Header="Activate as Gang" Command="{Binding Source={StaticResource BindingProxy}, Path=Data.ActivateGangCommand}"></MenuItem>
                <MenuItem Header="Edit Character" Command="{Binding Source={StaticResource BindingProxy}, Path=Data.EditCharacterCommand}"></MenuItem>
                <MenuItem Header="Save Position" Command="{Binding Source={StaticResource BindingProxy}, Path=Data.SavePositionCommand}"></MenuItem>
                <MenuItem Header="Place" Command="{Binding Source={StaticResource BindingProxy}, Path=Data.PlaceCommand}"></MenuItem>
                <MenuItem Header="Spawn" Command="{Binding Source={StaticResource BindingProxy}, Path=Data.SpawnCommand}"></MenuItem>
                <MenuItem Header="Toggle Target" Command="{Binding Source={StaticResource BindingProxy}, Path=Data.ToggleTargetedCommand}"></MenuItem>
                <MenuItem Header="Move Camera to Target" Command="{Binding Source={StaticResource BindingProxy}, Path=Data.TargetAndFollowCommand}"></MenuItem>
                <MenuItem Header="Move Target to Camera" Command="{Binding Source={StaticResource BindingProxy}, Path=Data.MoveTargetToCameraCommand}"></MenuItem>
                <MenuItem Header="Maneuver with camera" Command="{Binding Source={StaticResource BindingProxy}, Path=Data.ToggleManeuverWithCameraCommand}"></MenuItem>
                <MenuItem Header="Clear From Desktop" Command="{Binding Source={StaticResource BindingProxy}, Path=Data.ClearFromDesktopCommand}"></MenuItem>
                <MenuItem Header="Reset Orientation" Command="{Binding Source={StaticResource BindingProxy}, Path=Data.ResetOrientationCommand}"></MenuItem>
            </ContextMenu>
            <ContextMenu x:Key="AttackMenu">
                <MenuItem Header="Target" Command="{Binding Source={StaticResource BindingProxy}, Path=Data.AttackTargetCommand}"></MenuItem>
                <MenuItem Header="Target and Execute" Command="{Binding Source={StaticResource BindingProxy}, Path=Data.AttackTargetAndExecuteCommand}"></MenuItem>
                <MenuItem Header="Target and Execute Crowd" Command="{Binding Source={StaticResource BindingProxy}, Path=Data.AttackTargetAndExecuteCrowdCommand}"></MenuItem>
            </ContextMenu>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"></RowDefinition>
            <RowDefinition Height="auto"></RowDefinition>
            <RowDefinition />
        </Grid.RowDefinitions>
        <characters:CharacterManagementMenuControl
                Grid.Row="0"
                SavePositionCommand="{Binding SavePositionCommand}"
                PlaceCommand="{Binding PlaceCommand}"
                SpawnCommand="{Binding SpawnCommand}"
                ToggleTargetedCommand="{Binding ToggleTargetedCommand}"
                TargetAndFollowCommand="{Binding TargetAndFollowCommand}"
                MoveTargetToCameraCommand="{Binding MoveTargetToCameraCommand}"
                ToggleManeuverWithCameraCommand="{Binding ToggleManeuverWithCameraCommand}"
                ClearFromDesktopCommand="{Binding ClearFromDesktopCommand}"
                ActivateCharacterCommand="{Binding ActivateCharacterCommand}"
                ResetOrientationCommand="{Binding ResetOrientationCommand}"
                CycleCommandsThroughCrowdCommand="{Binding CycleCommandsThroughCrowdCommand}"
                ></characters:CharacterManagementMenuControl>
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Button Grid.Column="0" Style="{StaticResource IconButton}" HorizontalAlignment="Left" Content="&#xf0e4;" ToolTip="Reset Counter (Ctrl+K)" Command="{Binding ResetDistanceCounterCommand}"/>
            <TextBlock Name="txtDistanceCounter"  Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Center" Foreground="White"                    
                         Text="{Binding Path=CurrentDistanceCountingCharacter.CurrentDistanceCount}"/>
        </Grid>
        <library:MultiSelectListBox x:Name="RosterViewListBox" Grid.Row="2" ItemsSource="{Binding Source={StaticResource ResourceKey=ParticipantsView}}"
                    AllowDrop="True" SelectionMode="Extended" Background="Transparent" TextElement.Foreground="White" Drop="RosterViewListBox_Drop" DragOver="RosterViewListBox_DragOver"
                     SelectedItemsList="{Binding SelectedParticipants, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" BorderBrush="Transparent" BorderThickness="0"
                                    extensions:DragDropExtension.ScrollOnDragDrop="True">
            <ListBox.GroupStyle>
                <GroupStyle>
                    <GroupStyle.ContainerStyle>
                        <Style TargetType="{x:Type GroupItem}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Grid>
                                            <ToggleButton Name="toggleButton" Style="{StaticResource ToggleButtonSmallStyle}" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0 9 1 0" IsChecked="{Binding ElementName=ExpanderOptionGroup, Path=IsExpanded}" 
                                                            Background="Transparent" BorderBrush="Transparent" Panel.ZIndex="10">
                                            </ToggleButton>
                                            <GroupBox Header="{Binding Name, Converter={StaticResource CrowdNameConverter}}" x:Name="grpBoxOptionGroup" Style="{StaticResource GroupBoxWithBlueBorderStyle}">
                                                <GroupBox.HeaderTemplate>
                                                    <DataTemplate>
                                                        <Border Height="20" BorderBrush="AliceBlue" PreviewMouseDown="TextBlock_PreviewMouseDown">
                                                            <TextBlock  Text="{Binding}" PreviewMouseDown="TextBlock_PreviewMouseDown">
                                                            </TextBlock>
                                                            <Border.Style>
                                                                <Style TargetType="Border">
                                                                    <Style.Triggers>
                                                                        <DataTrigger Binding="{Binding Path=DataContext.ShowAttackContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType=roster:RosterExplorerView}}" Value="True">
                                                                            <Setter Property="ContextMenu" Value="{StaticResource ResourceKey=AttackMenu}" />
                                                                        </DataTrigger>
                                                                        <DataTrigger Binding="{Binding Path=DataContext.ShowAttackContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType=roster:RosterExplorerView}}" Value="False">
                                                                            <Setter Property="ContextMenu" Value="{StaticResource ResourceKey=RosterExplorerMenu}" />
                                                                        </DataTrigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Border.Style>
                                                        </Border>
                                                            
                                                    </DataTemplate>
                                                </GroupBox.HeaderTemplate>
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="Auto"/>
                                                        <RowDefinition/>
                                                    </Grid.RowDefinitions>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition/>
                                                    </Grid.ColumnDefinitions>

                                                    <Expander Name="ExpanderOptionGroup" Grid.Row="1" Grid.ColumnSpan="2" Style="{StaticResource ExpanderWithoutToggleButtonStyle}"
                                                      OverridesDefaultStyle="True"  VerticalAlignment="Top" Expanded="ExpanderOptionGroup_ExpansionChanged" Collapsed="ExpanderOptionGroup_ExpansionChanged"
                                                      >
                                                        <ItemsPresenter PreviewMouseDown="ListViewItem_PreviewMouseDown"></ItemsPresenter>
                                                    </Expander>
                                                </Grid>
                                            </GroupBox>
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </GroupStyle.ContainerStyle>
                </GroupStyle>
            </ListBox.GroupStyle>
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <Grid  HorizontalAlignment="Stretch">
                        <Grid.Style>
                            <Style TargetType="{x:Type Grid}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=DataContext.ShowAttackContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType=roster:RosterExplorerView}}" Value="True">
                                        <Setter Property="ContextMenu" Value="{StaticResource ResourceKey=AttackMenu}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=DataContext.ShowAttackContextMenu, RelativeSource={RelativeSource FindAncestor, AncestorType=roster:RosterExplorerView}}" Value="False">
                                        <Setter Property="ContextMenu" Value="{StaticResource ResourceKey=RosterExplorerMenu}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition ></ColumnDefinition>
                            <ColumnDefinition Width="auto"></ColumnDefinition>
                            <ColumnDefinition Width="auto"></ColumnDefinition>
                            <ColumnDefinition Width="auto"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <TextBlock Name="txtBlockCharacterName" Text="{Binding Name}" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Stretch"/>
                        <TextBlock Grid.Column="1"
                               FontFamily="{StaticResource ResourceKey=FontFamily_FontAwesome}" 
                               Text="&#xf00c;" VerticalAlignment="Center"
                               >
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Setter Property="Visibility" Value="Collapsed"></Setter>
                                    <Style.Triggers>
                                        <DataTrigger Value="true" Binding="{Binding IsActive}">
                                            <Setter Property="Visibility" Value="Visible"></Setter>
                                        </DataTrigger>
                                        <DataTrigger Value="true" Binding="{Binding IsGangLeader}">
                                            <Setter Property="Foreground" Value="Red"/>
                                        </DataTrigger>
                                        <DataTrigger Value="false" Binding="{Binding IsGangLeader}">
                                            <Setter Property="Foreground" Value="Green"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <TextBlock Grid.Column="2" FontFamily="{StaticResource FontFamily_FontAwesome}" Visibility="{Binding ActiveAttackConfiguration.AttackMode, Converter={StaticResource ActiveAttackModeToVisibilityConverter}}" Text="{Binding ActiveAttackConfiguration.AttackMode, Converter={StaticResource ActiveAttackModeToAnimationIconTextConverter}}" HorizontalAlignment="Right" VerticalAlignment="Center">
                        </TextBlock>
                        <!--<TextBlock Grid.Column="3" FontFamily="{StaticResource FontFamily_FontAwesome}" Visibility="{Binding ActiveAttackConfiguration.AttackEffectOption, Converter={StaticResource ActiveAttackEffectToVisibilityConverter}}" Text="{Binding ActiveAttackConfiguration.AttackEffectOption, Converter={StaticResource ActiveAttackEffectToAnimationIconTextConverter}}" HorizontalAlignment="Right" VerticalAlignment="Center">
                            <TextBlock.InputBindings>
                                <MouseBinding Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=roster:RosterExplorerView}, Path=DataContext.ResetCharacterStateCommand}" CommandParameter="{Binding ElementName=txtBlockCharacterName, Path=Text}" MouseAction="LeftClick"/>
                            </TextBlock.InputBindings>
                        </TextBlock>-->
                        <StackPanel Grid.Column="3" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center">
                            <TextBlock FontFamily="{StaticResource FontFamily_FontAwesome}" Visibility="{Binding ActiveAttackConfiguration.IsStunned, Converter={StaticResource BooleanToVisibilityConverter}}" Text="&#xf119;" HorizontalAlignment="Right" VerticalAlignment="Center">
                                <TextBlock.InputBindings>
                                    <MouseBinding Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=roster:RosterExplorerView}, Path=DataContext.ResetCharacterStateCommand}" CommandParameter="{Binding ElementName=txtBlockCharacterName, Path=Text}" MouseAction="LeftClick"/>
                                </TextBlock.InputBindings>
                            </TextBlock>
                            <TextBlock FontFamily="{StaticResource FontFamily_FontAwesome}" Visibility="{Binding ActiveAttackConfiguration.IsUnconcious, Converter={StaticResource BooleanToVisibilityConverter}}" Text="&#xf236;" HorizontalAlignment="Right" VerticalAlignment="Center">
                                <TextBlock.InputBindings>
                                    <MouseBinding Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=roster:RosterExplorerView}, Path=DataContext.ResetCharacterStateCommand}" CommandParameter="{Binding ElementName=txtBlockCharacterName, Path=Text}" MouseAction="LeftClick"/>
                                </TextBlock.InputBindings>
                            </TextBlock>
                            <TextBlock FontFamily="{StaticResource FontFamily_FontAwesome}" Visibility="{Binding ActiveAttackConfiguration.IsDying, Converter={StaticResource BooleanToVisibilityConverter}}" Text="&#xf0f9;" HorizontalAlignment="Right" VerticalAlignment="Center">
                                <TextBlock.InputBindings>
                                    <MouseBinding Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=roster:RosterExplorerView}, Path=DataContext.ResetCharacterStateCommand}" CommandParameter="{Binding ElementName=txtBlockCharacterName, Path=Text}" MouseAction="LeftClick"/>
                                </TextBlock.InputBindings>
                            </TextBlock>
                            <TextBlock FontFamily="{StaticResource FontFamily_FontAwesome}" Visibility="{Binding ActiveAttackConfiguration.IsDead, Converter={StaticResource BooleanToVisibilityConverter}}" Text="&#xf011;" HorizontalAlignment="Right" VerticalAlignment="Center">
                                <TextBlock.InputBindings>
                                    <MouseBinding Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=roster:RosterExplorerView}, Path=DataContext.ResetCharacterStateCommand}" CommandParameter="{Binding ElementName=txtBlockCharacterName, Path=Text}" MouseAction="LeftClick"/>
                                </TextBlock.InputBindings>
                            </TextBlock>
                            <TextBlock FontFamily="{StaticResource FontFamily_FontAwesome}" Visibility="{Binding ActiveAttackConfiguration.IsKnockedBack, Converter={StaticResource BooleanToVisibilityConverter}}" Text="&#xf263;" HorizontalAlignment="Right" VerticalAlignment="Center">
                                <TextBlock.InputBindings>
                                    <MouseBinding Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=roster:RosterExplorerView}, Path=DataContext.ResetCharacterStateCommand}" CommandParameter="{Binding ElementName=txtBlockCharacterName, Path=Text}" MouseAction="LeftClick"/>
                                </TextBlock.InputBindings>
                            </TextBlock>
                        </StackPanel>
                    </Grid>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </library:MultiSelectListBox>
    </Grid>
</UserControl>
