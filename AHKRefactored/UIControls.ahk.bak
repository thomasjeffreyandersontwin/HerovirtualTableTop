#Include Yunit\Yunit.ahk
#Include Yunit\Window.ahK
#Include Yunit\StdOut.ahk

Class UIControlTestSuite{
	class MockUI{
		HandledValue:=""
		Name:="MockUI"
		RenderPos(){
			return "x01 y02 h300 w400"
		}
		HandleEvent(){
			global handledValue:= "Event Ran"
		}
		__New(){
			Gui, MockUI: New
			Gui, MockUI: Show, x0 y0 h100 w100
		}
	}
	class UIControlTest{
		Begin(){
			this.MockUI:=new UIControlTestSuite.MockUI()
			this.handleFunc:=ObjBindMethod(this.MockUI.HandleEvent,"")
			this.renderFunc:=ObjBindMethod(this.MockUI.RenderPos,"")
			
		}
		TestRendersCorrectControl(){
			this.TestUIControl:=new UIControl("TestUIControl", "Text", , , "MockUI")
			this.TestUIControl.Render("TestValue")
			
			GuiControlGet, actual,MockUI:,TestUIControl, 
			valid:= "TestValue"
			
			Yunit.AssertEquals(actual, valid)
			
		}
		TestCallsCustomFunction(){
			this.TestUIControl:=new UIControl("TestUIControl", "Edit","HandleEvent" , this.MockUI, "MockUI")
			this.TestUIControl.Render("TestValue")
			
			GuiControl, Focus, TestUIControl
			Send "new value"
			Gui,  MockUI:Submit 
			GuiControlGet, actual, MockUI:,TestUIControl
			
			global handledValue
			actual:=handledValue
			valid:="Event Ran"
			Yunit.AssertEquals(actual, valid)
		}
		TestChangesValue(){
			this.TestUIControl:=new UIControl("TestUIControl", "Edit","HandleEvent" , this.MockUI, "MockUI")
			this.TestUIControl.Render("TestValue")
			this.TestUIControl.Value:="changed value"
			
			GuiControlGet, actual, MockUI:,TestUIControl, 
			actual:=this.TestUIControl.Value
			Yunit.AssertEquals(actual, "changed value")
		}
		TestAccessessValue(){
			this.TestUIControl:=new UIControl("TestUIControl", "Edit","HandleEvent" , this.MockUI, "MockUI")
			this.TestUIControl.Render("TestValue")
			
			GuiControl ,MockUI:, TestUIControl, "changed value"
			
			GuiControlGet, actual, MockUI:,TestUIControl, 
			valid:=this.TestUIControl.Value
			Yunit.AssertEquals(actual, valid)
		}
		TestRendersPOSWithCustomFunction(){
			renderFunc:=ObjBindMethod(this.MockUI.RenderPos,"")
			this.TestUIControl:=new UIControl("TestUIControl", "Edit","HandleEvent" , this.MockUI, "MockUI", renderFunc)
			this.TestUIControl.Render("TestValue")
			
			GuiControlGet, actual, MockUI:Pos,TestUIControl
			Yunit.AssertEquals(actualx, 01)
			Yunit.AssertEquals(actualy, 02)
			Yunit.AssertEquals(actualh, 300)
			Yunit.AssertEquals(actualw, 400)
			
		}
		End(){
			GUi, MockUI:Destroy
		}
	}
	class ReadWriteControlTest{
		Begin(){
			this.MockUI:=new UIControlTestSuite.MockUI()
		}
		TestEditModeEnablesAndDisables(){
			testRWControl:= new ReadWriteControl("TestRWControl", "Test Label", "MockUI")
			testRWControl.Render()
			
			testRWControl.EditMode:=false
			GuiControlGet, actual, MockUI:Visible, TestRWControl
			Yunit.AssertEquals(actual, true)
			GuiControlGet, actual, MockUI:Visible, TestRWControlEdit
			Yunit.AssertEquals(actual, false)
			
			testRWControl.EditMode:=true
			GuiControlGet, actual, MockUI:Visible, TestRWControl
			Yunit.AssertEquals(actual, false)
			GuiControlGet, actual, MockUI:Visible, TestRWControlEdit
			Yunit.AssertEquals(actual, true)
		}
		TestLabel(){
			testRWControl:= new ReadWriteControl("TestRWControl", "Test Label", "MockUI")
			testRWControl.Render()
			
			GuiControlGet, actual, MockUI:, TestRWControlLabel
			Yunit.AssertEquals(actual, "Test Label:")
		}
		TestPositionsCorrectly(){
			testRWControl:= new ReadWriteControl("TestRWControl", "Test Label", "MockUI")
			testRWControl.Render(true)
			
			testSecondRWControl:= new ReadWriteControl("TestRWControl2", "Test Label2", "MockUI")
			testSecondRWControl.Render()
			
			
			
			GuiControlGet, firstLabel, MockUI:Pos, TestRWControlLabel
			GuiControlGet, firstText, MockUI:Pos, TestRWControl
			GuiControlGet, firstEdit, MockUI:Pos, TestRWControlEdit
			
			GuiControlGet, secondLabel, MockUI:Pos, TestRWControl2Label
			GuiControlGet, secondText, MockUI:Pos, TestRWControl2
			
			Yunit.Assert(firstTextX, firstLabelX + firstLabelw + 5)
			Yunit.Assert(firstEditX, firstLabelX + firstLabelw + 5)
			Yunit.Assert(secondTextX, secondLabelX + secondLabelw + 5)
			
			Yunit.Assert(secondTexty, firstTexty + 22)
		}
		TestUpdatesValue(){
			testRWControl:= new ReadWriteControl("TestUIControl", "Test Label", "MockUI")
			testRWControl.Render(true)
			testRWControl.Value:="changed value"
			
			GuiControlGet, actual,MockUI:,TestUIControl, 
			valid:= "changed value"
			
			GuiControlGet, actual,MockUI:,TestUIControlEdit, 
			valid:= "changed value"
	
		}
		TestGetsValue(){
			testRWControl:= new ReadWriteControl("TestUIControl", "Test Label", "MockUI")
			testRWControl.Render(true)
			
			GuiControl ,MockUI:, TestUIControlEdit, changed value
			actual:=testRWControl.Value
			
			Yunit.AssertEquals(actual, "changed value")
			
			
		}
		End(){
			GUi, MockUI:Destroy
		}
	}
	Class ListBoxControlTest{
		Begin(){
			this.MockUI:=new UIControlTestSuite.MockUI()
		}
		TestRendersAllItems(){
			testLB:= new ListBoxControl("TestListBoxControl",,,"MockUI")
			list:={a:"ContentA", b:"ContentB"}
			testLB.Render(list)
			valid:="a|b|c"
			
			;ControlGet, actual, List,
			;Yunit.AssertEquals(actual, valid)

		}
	}
}
	
Class ButtonCOntrol extends UIControl{
	__New(variable, eventTarget:="", ui:="", renderPosFunc:=""){
		this.Variable:=variable
		this._UI:=ui
		this.ControlType:="Button"
		this.Event:=variable
		this.EventTarget:= eventTarget
		if(renderPosFunc<>""){
			this.RenderPos:=renderPosFunc
		}
	}
	
}
Class UIControl{
	Variable:=""
	_UI:=""
	EventTarget:=""
	controlType:=""
	__New(variable, controlType, event:="", eventTarget:="", ui:="",renderPosFunc:=""){
		this.Variable:=variable
		this._UI:=ui
		this.ControlType:=controlType
		this.Event:=event
		this.EventTarget:= eventTarget
		if(renderPosFunc<>""){
			this.RenderPos:=renderPosFunc
		}
	}
	UI{
		Get{
			ui:=this._Ui 
			if(ui <>""){
				ui:=Ui . ":"
			}
			return ui
		}
		Set{
			this._ui:=ui
		}
	}
	Value{
		Set{
			local dummy
			variable:=this.Variable
			ui:= this.UI
			GuiControlGet, oldValue,%ui%, %variable%
			if (oldValue <> value){
				GuiControl ,%ui%, %variable%, %value%
			}
		}
		Get{
			local dummy
			variable:=this.Variable
			ui:= this.UI
			GuiControlGet, variable,%ui%, %variable%
			return variable
		}
	}
	RenderPos(groupStarting){
		if(groupStarting== true){
			pos:="yp+15 xp+10"
		}
		else{
			pos:="xs y+0"
		}
	}
	Render(value:="",GroupStarting:="" ,para*){
		local dummy
		pos:=this.RenderPos(groupStarting)
		if(value==""){
			value:=this.variable
		}

		variable:=this.Variable
		ui:=this.Ui 
		controlType:=this.controlType
		Gui, %ui%Add, %controlType%, v%variable% +BackgroundTrans %pos%, %value%
		event:=this.Event
		if(event <>""){
			fn:=ObjBindMethod(this.EventTarget, event, "")
			GuiControl +g, %variable%, % fn
		}
	}	
}
Class ReadWriteControl extends UIControl{
	Label:=""
	__New(variable, label:="",ui:=""){
		this.Variable:=variable
		this.Label:=label
		this._UI:=ui
		this.ControlType:=controlType
	}
	Render(GroupStarting:=""){
		local dummy
		if(GroupStarting== true){
			pos:="yp+15 xp+10"
		}
		else{
			pos:="xs y+0"
		}
		
		label:=this.label
		if(label==""){
			label := this.variable
		}
		
		variable:=this.Variable
		ui:=this.Ui 
		
		Gui, %ui%Add, Text, v%variable%Label %pos% Section +BackgroundTrans, %label%:
		Gui, %ui%Add, Text, v%variable% +BackgroundTrans x+5, No Character Selected
		Gui, %ui%Add, Edit, v%variable%Edit  xp +BackgroundTrans, No Character Selected
		GuiControl, %ui%Hide, %variable%Edit	
	}
	
	EditMode{
		Set{
			local dummy
			ui:=this.UI
			variable:=this.Variable
			if(value ==true){
				
				GuiControl ,  %UI%Hide, %variable%
				GuiControl , %UI%Show, %variable%Edit
			}
			else
			{
				GuiControl , %UI%Show, %variable%
				GuiControl , %UI%Hide, %variable%Edit
			}
		}
					
	}
	Value{
		Set{
			local dummy
			variable:=this.Variable
			ui:= this.UI
			GuiControlGet, oldValue,%ui%, %variable%
			if (oldValue <> value){
				GuiControl ,%ui%, %variable%, %value%
				GuiControl ,%ui%, %variable%Edit, %value%
			}
		}
		Get{
			local dummy
			variable:=this.Variable
			ui:= this.UI
			GuiControlGet, variable,%ui%, %variable%Edit
			return variable
		}
	}
}
Class ListBoxControl extends UIControl{		
	_List:=""
	__New(variable, event:="", eventTarget:="", ui:="",renderPosFunc:=""){
		this.Variable:=variable
		this.ControlType:="ListBox"
		this._UI:=ui
		this.Event:=event
		this.EventTarget:= eventTarget
		if(renderPosFunc<>""){
			this.RenderPos:=renderPosFunc
		}
	}
	
	getListString(list){
		for key, val in list{
			listString.= key . "|"
		}
		return listString
	}
	Render(list ,para*){
		this._list:=List
		listString:= this.getListString(list)
		base.Render(listString,para*)
	}
	
	List{
		Set{
			this._list:=value
			listString:= "|" . this.getListString(this._list)
			
			this.Value:=listString
		}
	}	
}
		
Yunit.Use(YunitWindow).Test(UIControlTestSuite)